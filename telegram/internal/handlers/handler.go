package handlers

import (
	"context"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/maksroxx/DeliveryService/telegram/internal/service"
)

type Handler struct {
	serviceAuth    *service.AuthService
	servicePackage *service.PackageService
}

func NewHandler(serviceAuth *service.AuthService, servicePackage *service.PackageService) *Handler {
	return &Handler{
		serviceAuth:    serviceAuth,
		servicePackage: servicePackage,
	}
}

func (h *Handler) HandleUpdate(update tgbotapi.Update, bot *tgbotapi.BotAPI) {
	if update.Message == nil {
		return
	}

	chatID := update.Message.Chat.ID
	text := update.Message.Text

	switch {
	case text == "/start":
		h.sendStart(bot, chatID)

	case text == "/packages":
		msgText, err := h.servicePackage.GetUserPackages(context.Background(), update.Message.From.ID)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—ã–ª–æ–∫: %v", err)
			h.sendMarkdown(bot, chatID, buildErrorMessage("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—ã–ª–∫–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç."))
		} else {
			h.sendMarkdown(bot, chatID, escapeMarkdown(msgText))
		}

	case strings.HasPrefix(text, "auth_"):
		err := h.serviceAuth.LinkTelegramAccount(context.Background(), text, update.Message.From.ID)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞: %v", err)
			h.sendMarkdown(bot, chatID, buildErrorMessage("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –∫–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫."))
		} else {
			h.sendSuccessAuth(bot, chatID)
		}

	default:
		h.sendMarkdown(bot, chatID, buildErrorMessage("üö´ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/start` –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥."))
	}
}

func (h *Handler) sendStart(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, buildStartMessage())
	msg.ParseMode = "MarkdownV2"
	msg.ReplyMarkup = defaultKeyboard()
	bot.Send(msg)
}

func (h *Handler) sendSuccessAuth(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, buildSuccessMessage("–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞."))
	msg.ParseMode = "MarkdownV2"
	msg.ReplyMarkup = defaultKeyboard()
	bot.Send(msg)
}

func (h *Handler) sendMarkdown(bot *tgbotapi.BotAPI, chatID int64, msg string) {
	message := tgbotapi.NewMessage(chatID, msg)
	message.ParseMode = "MarkdownV2"
	_, err := bot.Send(message)
	if err != nil {
		log.Printf("‚ùó –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}
