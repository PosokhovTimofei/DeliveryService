// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: database/database.proto

package databasepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PackageService_GetPackage_FullMethodName              = "/delivery.PackageService/GetPackage"
	PackageService_GetAllPackages_FullMethodName          = "/delivery.PackageService/GetAllPackages"
	PackageService_GetExpiredPackages_FullMethodName      = "/delivery.PackageService/GetExpiredPackages"
	PackageService_MarkAsExpiredByID_FullMethodName       = "/delivery.PackageService/MarkAsExpiredByID"
	PackageService_GetUserPackages_FullMethodName         = "/delivery.PackageService/GetUserPackages"
	PackageService_CreatePackage_FullMethodName           = "/delivery.PackageService/CreatePackage"
	PackageService_CreatePackageWithCalc_FullMethodName   = "/delivery.PackageService/CreatePackageWithCalc"
	PackageService_UpdatePackage_FullMethodName           = "/delivery.PackageService/UpdatePackage"
	PackageService_DeletePackage_FullMethodName           = "/delivery.PackageService/DeletePackage"
	PackageService_CancelPackage_FullMethodName           = "/delivery.PackageService/CancelPackage"
	PackageService_GetPackageStatus_FullMethodName        = "/delivery.PackageService/GetPackageStatus"
	PackageService_TransferExpiredPackages_FullMethodName = "/delivery.PackageService/TransferExpiredPackages"
)

// PackageServiceClient is the client API for PackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageServiceClient interface {
	GetPackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error)
	GetAllPackages(ctx context.Context, in *PackageFilter, opts ...grpc.CallOption) (*PackageList, error)
	GetExpiredPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageList, error)
	MarkAsExpiredByID(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error)
	GetUserPackages(ctx context.Context, in *PackageFilter, opts ...grpc.CallOption) (*PackageList, error)
	CreatePackage(ctx context.Context, in *Package, opts ...grpc.CallOption) (*Package, error)
	CreatePackageWithCalc(ctx context.Context, in *Package, opts ...grpc.CallOption) (*Package, error)
	UpdatePackage(ctx context.Context, in *Package, opts ...grpc.CallOption) (*Package, error)
	DeletePackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Empty, error)
	CancelPackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error)
	GetPackageStatus(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*PackageStatus, error)
	TransferExpiredPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type packageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageServiceClient(cc grpc.ClientConnInterface) PackageServiceClient {
	return &packageServiceClient{cc}
}

func (c *packageServiceClient) GetPackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Package)
	err := c.cc.Invoke(ctx, PackageService_GetPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetAllPackages(ctx context.Context, in *PackageFilter, opts ...grpc.CallOption) (*PackageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageList)
	err := c.cc.Invoke(ctx, PackageService_GetAllPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetExpiredPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PackageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageList)
	err := c.cc.Invoke(ctx, PackageService_GetExpiredPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) MarkAsExpiredByID(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Package)
	err := c.cc.Invoke(ctx, PackageService_MarkAsExpiredByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetUserPackages(ctx context.Context, in *PackageFilter, opts ...grpc.CallOption) (*PackageList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageList)
	err := c.cc.Invoke(ctx, PackageService_GetUserPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) CreatePackage(ctx context.Context, in *Package, opts ...grpc.CallOption) (*Package, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Package)
	err := c.cc.Invoke(ctx, PackageService_CreatePackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) CreatePackageWithCalc(ctx context.Context, in *Package, opts ...grpc.CallOption) (*Package, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Package)
	err := c.cc.Invoke(ctx, PackageService_CreatePackageWithCalc_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) UpdatePackage(ctx context.Context, in *Package, opts ...grpc.CallOption) (*Package, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Package)
	err := c.cc.Invoke(ctx, PackageService_UpdatePackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) DeletePackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PackageService_DeletePackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) CancelPackage(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*Package, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Package)
	err := c.cc.Invoke(ctx, PackageService_CancelPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetPackageStatus(ctx context.Context, in *PackageID, opts ...grpc.CallOption) (*PackageStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PackageStatus)
	err := c.cc.Invoke(ctx, PackageService_GetPackageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) TransferExpiredPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PackageService_TransferExpiredPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageServiceServer is the server API for PackageService service.
// All implementations must embed UnimplementedPackageServiceServer
// for forward compatibility.
type PackageServiceServer interface {
	GetPackage(context.Context, *PackageID) (*Package, error)
	GetAllPackages(context.Context, *PackageFilter) (*PackageList, error)
	GetExpiredPackages(context.Context, *Empty) (*PackageList, error)
	MarkAsExpiredByID(context.Context, *PackageID) (*Package, error)
	GetUserPackages(context.Context, *PackageFilter) (*PackageList, error)
	CreatePackage(context.Context, *Package) (*Package, error)
	CreatePackageWithCalc(context.Context, *Package) (*Package, error)
	UpdatePackage(context.Context, *Package) (*Package, error)
	DeletePackage(context.Context, *PackageID) (*Empty, error)
	CancelPackage(context.Context, *PackageID) (*Package, error)
	GetPackageStatus(context.Context, *PackageID) (*PackageStatus, error)
	TransferExpiredPackages(context.Context, *Empty) (*Empty, error)
	mustEmbedUnimplementedPackageServiceServer()
}

// UnimplementedPackageServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPackageServiceServer struct{}

func (UnimplementedPackageServiceServer) GetPackage(context.Context, *PackageID) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedPackageServiceServer) GetAllPackages(context.Context, *PackageFilter) (*PackageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPackages not implemented")
}
func (UnimplementedPackageServiceServer) GetExpiredPackages(context.Context, *Empty) (*PackageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpiredPackages not implemented")
}
func (UnimplementedPackageServiceServer) MarkAsExpiredByID(context.Context, *PackageID) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsExpiredByID not implemented")
}
func (UnimplementedPackageServiceServer) GetUserPackages(context.Context, *PackageFilter) (*PackageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPackages not implemented")
}
func (UnimplementedPackageServiceServer) CreatePackage(context.Context, *Package) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (UnimplementedPackageServiceServer) CreatePackageWithCalc(context.Context, *Package) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackageWithCalc not implemented")
}
func (UnimplementedPackageServiceServer) UpdatePackage(context.Context, *Package) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (UnimplementedPackageServiceServer) DeletePackage(context.Context, *PackageID) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackage not implemented")
}
func (UnimplementedPackageServiceServer) CancelPackage(context.Context, *PackageID) (*Package, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelPackage not implemented")
}
func (UnimplementedPackageServiceServer) GetPackageStatus(context.Context, *PackageID) (*PackageStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageStatus not implemented")
}
func (UnimplementedPackageServiceServer) TransferExpiredPackages(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferExpiredPackages not implemented")
}
func (UnimplementedPackageServiceServer) mustEmbedUnimplementedPackageServiceServer() {}
func (UnimplementedPackageServiceServer) testEmbeddedByValue()                        {}

// UnsafePackageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageServiceServer will
// result in compilation errors.
type UnsafePackageServiceServer interface {
	mustEmbedUnimplementedPackageServiceServer()
}

func RegisterPackageServiceServer(s grpc.ServiceRegistrar, srv PackageServiceServer) {
	// If the following call pancis, it indicates UnimplementedPackageServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PackageService_ServiceDesc, srv)
}

func _PackageService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_GetPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetPackage(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetAllPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetAllPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_GetAllPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetAllPackages(ctx, req.(*PackageFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetExpiredPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetExpiredPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_GetExpiredPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetExpiredPackages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_MarkAsExpiredByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).MarkAsExpiredByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_MarkAsExpiredByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).MarkAsExpiredByID(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetUserPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetUserPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_GetUserPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetUserPackages(ctx, req.(*PackageFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Package)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_CreatePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).CreatePackage(ctx, req.(*Package))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_CreatePackageWithCalc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Package)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).CreatePackageWithCalc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_CreatePackageWithCalc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).CreatePackageWithCalc(ctx, req.(*Package))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Package)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_UpdatePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).UpdatePackage(ctx, req.(*Package))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_DeletePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).DeletePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_DeletePackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).DeletePackage(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_CancelPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).CancelPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_CancelPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).CancelPackage(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetPackageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PackageID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetPackageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_GetPackageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetPackageStatus(ctx, req.(*PackageID))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_TransferExpiredPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).TransferExpiredPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PackageService_TransferExpiredPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).TransferExpiredPackages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageService_ServiceDesc is the grpc.ServiceDesc for PackageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "delivery.PackageService",
	HandlerType: (*PackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPackage",
			Handler:    _PackageService_GetPackage_Handler,
		},
		{
			MethodName: "GetAllPackages",
			Handler:    _PackageService_GetAllPackages_Handler,
		},
		{
			MethodName: "GetExpiredPackages",
			Handler:    _PackageService_GetExpiredPackages_Handler,
		},
		{
			MethodName: "MarkAsExpiredByID",
			Handler:    _PackageService_MarkAsExpiredByID_Handler,
		},
		{
			MethodName: "GetUserPackages",
			Handler:    _PackageService_GetUserPackages_Handler,
		},
		{
			MethodName: "CreatePackage",
			Handler:    _PackageService_CreatePackage_Handler,
		},
		{
			MethodName: "CreatePackageWithCalc",
			Handler:    _PackageService_CreatePackageWithCalc_Handler,
		},
		{
			MethodName: "UpdatePackage",
			Handler:    _PackageService_UpdatePackage_Handler,
		},
		{
			MethodName: "DeletePackage",
			Handler:    _PackageService_DeletePackage_Handler,
		},
		{
			MethodName: "CancelPackage",
			Handler:    _PackageService_CancelPackage_Handler,
		},
		{
			MethodName: "GetPackageStatus",
			Handler:    _PackageService_GetPackageStatus_Handler,
		},
		{
			MethodName: "TransferExpiredPackages",
			Handler:    _PackageService_TransferExpiredPackages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "database/database.proto",
}
