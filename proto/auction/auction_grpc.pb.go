// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: auction/auction.proto

package auctionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuctionService_PlaceBid_FullMethodName              = "/auction.AuctionService/PlaceBid"
	AuctionService_GetBidsByPackage_FullMethodName      = "/auction.AuctionService/GetBidsByPackage"
	AuctionService_GetAuctioningPackages_FullMethodName = "/auction.AuctionService/GetAuctioningPackages"
	AuctionService_GetFailedPackages_FullMethodName     = "/auction.AuctionService/GetFailedPackages"
	AuctionService_GetUserWonPackages_FullMethodName    = "/auction.AuctionService/GetUserWonPackages"
	AuctionService_StartAuction_FullMethodName          = "/auction.AuctionService/StartAuction"
	AuctionService_RepeateAuction_FullMethodName        = "/auction.AuctionService/RepeateAuction"
	AuctionService_StreamBids_FullMethodName            = "/auction.AuctionService/StreamBids"
)

// AuctionServiceClient is the client API for AuctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionServiceClient interface {
	PlaceBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error)
	GetBidsByPackage(ctx context.Context, in *BidsRequest, opts ...grpc.CallOption) (*BidsResponse, error)
	GetAuctioningPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Packages, error)
	GetFailedPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Packages, error)
	GetUserWonPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Packages, error)
	StartAuction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	RepeateAuction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	StreamBids(ctx context.Context, in *BidsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Bid], error)
}

type auctionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionServiceClient(cc grpc.ClientConnInterface) AuctionServiceClient {
	return &auctionServiceClient{cc}
}

func (c *auctionServiceClient) PlaceBid(ctx context.Context, in *BidRequest, opts ...grpc.CallOption) (*BidResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BidResponse)
	err := c.cc.Invoke(ctx, AuctionService_PlaceBid_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) GetBidsByPackage(ctx context.Context, in *BidsRequest, opts ...grpc.CallOption) (*BidsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BidsResponse)
	err := c.cc.Invoke(ctx, AuctionService_GetBidsByPackage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) GetAuctioningPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Packages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Packages)
	err := c.cc.Invoke(ctx, AuctionService_GetAuctioningPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) GetFailedPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Packages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Packages)
	err := c.cc.Invoke(ctx, AuctionService_GetFailedPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) GetUserWonPackages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Packages, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Packages)
	err := c.cc.Invoke(ctx, AuctionService_GetUserWonPackages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) StartAuction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuctionService_StartAuction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) RepeateAuction(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, AuctionService_RepeateAuction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *auctionServiceClient) StreamBids(ctx context.Context, in *BidsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Bid], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AuctionService_ServiceDesc.Streams[0], AuctionService_StreamBids_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BidsRequest, Bid]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuctionService_StreamBidsClient = grpc.ServerStreamingClient[Bid]

// AuctionServiceServer is the server API for AuctionService service.
// All implementations must embed UnimplementedAuctionServiceServer
// for forward compatibility.
type AuctionServiceServer interface {
	PlaceBid(context.Context, *BidRequest) (*BidResponse, error)
	GetBidsByPackage(context.Context, *BidsRequest) (*BidsResponse, error)
	GetAuctioningPackages(context.Context, *Empty) (*Packages, error)
	GetFailedPackages(context.Context, *Empty) (*Packages, error)
	GetUserWonPackages(context.Context, *Empty) (*Packages, error)
	StartAuction(context.Context, *Empty) (*Empty, error)
	RepeateAuction(context.Context, *Empty) (*Empty, error)
	StreamBids(*BidsRequest, grpc.ServerStreamingServer[Bid]) error
	mustEmbedUnimplementedAuctionServiceServer()
}

// UnimplementedAuctionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuctionServiceServer struct{}

func (UnimplementedAuctionServiceServer) PlaceBid(context.Context, *BidRequest) (*BidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBid not implemented")
}
func (UnimplementedAuctionServiceServer) GetBidsByPackage(context.Context, *BidsRequest) (*BidsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBidsByPackage not implemented")
}
func (UnimplementedAuctionServiceServer) GetAuctioningPackages(context.Context, *Empty) (*Packages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuctioningPackages not implemented")
}
func (UnimplementedAuctionServiceServer) GetFailedPackages(context.Context, *Empty) (*Packages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFailedPackages not implemented")
}
func (UnimplementedAuctionServiceServer) GetUserWonPackages(context.Context, *Empty) (*Packages, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserWonPackages not implemented")
}
func (UnimplementedAuctionServiceServer) StartAuction(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAuction not implemented")
}
func (UnimplementedAuctionServiceServer) RepeateAuction(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepeateAuction not implemented")
}
func (UnimplementedAuctionServiceServer) StreamBids(*BidsRequest, grpc.ServerStreamingServer[Bid]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBids not implemented")
}
func (UnimplementedAuctionServiceServer) mustEmbedUnimplementedAuctionServiceServer() {}
func (UnimplementedAuctionServiceServer) testEmbeddedByValue()                        {}

// UnsafeAuctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionServiceServer will
// result in compilation errors.
type UnsafeAuctionServiceServer interface {
	mustEmbedUnimplementedAuctionServiceServer()
}

func RegisterAuctionServiceServer(s grpc.ServiceRegistrar, srv AuctionServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuctionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuctionService_ServiceDesc, srv)
}

func _AuctionService_PlaceBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).PlaceBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionService_PlaceBid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).PlaceBid(ctx, req.(*BidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_GetBidsByPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BidsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).GetBidsByPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionService_GetBidsByPackage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).GetBidsByPackage(ctx, req.(*BidsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_GetAuctioningPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).GetAuctioningPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionService_GetAuctioningPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).GetAuctioningPackages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_GetFailedPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).GetFailedPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionService_GetFailedPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).GetFailedPackages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_GetUserWonPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).GetUserWonPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionService_GetUserWonPackages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).GetUserWonPackages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_StartAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).StartAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionService_StartAuction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).StartAuction(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_RepeateAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuctionServiceServer).RepeateAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuctionService_RepeateAuction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuctionServiceServer).RepeateAuction(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuctionService_StreamBids_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BidsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuctionServiceServer).StreamBids(m, &grpc.GenericServerStream[BidsRequest, Bid]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AuctionService_StreamBidsServer = grpc.ServerStreamingServer[Bid]

// AuctionService_ServiceDesc is the grpc.ServiceDesc for AuctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auction.AuctionService",
	HandlerType: (*AuctionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceBid",
			Handler:    _AuctionService_PlaceBid_Handler,
		},
		{
			MethodName: "GetBidsByPackage",
			Handler:    _AuctionService_GetBidsByPackage_Handler,
		},
		{
			MethodName: "GetAuctioningPackages",
			Handler:    _AuctionService_GetAuctioningPackages_Handler,
		},
		{
			MethodName: "GetFailedPackages",
			Handler:    _AuctionService_GetFailedPackages_Handler,
		},
		{
			MethodName: "GetUserWonPackages",
			Handler:    _AuctionService_GetUserWonPackages_Handler,
		},
		{
			MethodName: "StartAuction",
			Handler:    _AuctionService_StartAuction_Handler,
		},
		{
			MethodName: "RepeateAuction",
			Handler:    _AuctionService_RepeateAuction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBids",
			Handler:       _AuctionService_StreamBids_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "auction/auction.proto",
}
